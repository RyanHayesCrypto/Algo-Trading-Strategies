import pandas as pd
import krakenex
import numpy as np
from pykrakenapi import KrakenAPI
import plotly.graph_objects as go
import requests
from scipy import stats
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

# Custom Kraken API class without SSL verification
class KrakenAPIWithoutSSL(krakenex.API):
    def __init__(self):
        super().__init__()
        self.session = requests.Session()
        retry_strategy = Retry(
            total=3, backoff_factor=1, status_forcelist=[429, 500, 502, 503, 504]
        )
        adapter = HTTPAdapter(max_retries=retry_strategy)
        self.session.mount("https://", adapter)
        self.session.verify = False

# Initialize API
api = KrakenAPIWithoutSSL()
k = KrakenAPI(api)

# Function to fetch tradable pairs
def fetch_tradable_pairs():
    try:
        tradable_pairs = k.get_tradable_asset_pairs()
        #print("Available Market Tickers:")
        #print(tradable_pairs.index.tolist())  # Print all tradable pairs
        return tradable_pairs.index.tolist()
    except Exception as e:
        print(f"Error fetching tradable pairs: {e}")
        return []

# Get available market tickers
available_pairs = fetch_tradable_pairs()

# Validate your crypto pair before fetching OHLC data
pair = 'XXBTZUSD'  # Example pair
if pair not in available_pairs:
    print(f"The pair '{pair}' is not available. Please choose from the list above.")
else:
    # Function to get OHLC data
    def get_ohlc_data(pair, interval=1):  # interval=1 corresponds to 1 minute
        try:
            ohlc_data, last = k.get_ohlc_data(pair, interval=interval)
            ohlc_data.index = pd.to_datetime(ohlc_data.index, unit='s')  # Convert timestamps to datetime
            return ohlc_data
        except Exception as e:
            print(f"Error fetching OHLC data for pair {pair}: {e}")
            return None

    # Fetch OHLC data if pair is valid
    ohlc_df = get_ohlc_data(pair, interval=1)

    if ohlc_df is not None:
        # Resample to 15-minute intervals
        df = ohlc_df.resample('15min').agg({
            'open': 'first',
            'high': 'max',
            'low': 'min',
            'close': 'last',
            'volume': 'sum'
        }).dropna()

        #print(df.head())  # Display the first few rows of the DataFrame
    else:
        print("Failed to fetch or process OHLC data.")

def isPivot(candle, window):
    """
    Function that detects if a candle is a pivot/fractal point.
    Args: 
        candle: index of the candle in the DataFrame
        window: number of candles before and after the current candle to consider
    Returns: 
        1 if pivot high, 2 if pivot low, 3 if both, and 0 by default
    """
    if candle - window < 0 or candle + window >= len(df):
        return 0

    pivotHigh = 1
    pivotLow = 2
    for i in range(candle - window, candle + window + 1):
        if df.iloc[candle].low > df.iloc[i].low:  # 'Low' changed to 'low' (lowercase)
            pivotLow = 0
        if df.iloc[candle].high < df.iloc[i].high:  # 'High' changed to 'high' (lowercase)
            pivotHigh = 0
    if pivotHigh and pivotLow:
        return 3
    elif pivotHigh:
        return pivotHigh
    elif pivotLow:
        return pivotLow
    else:
        return 0
    
window = 15 # Example window size
df['Pivot'] = [isPivot(i, window) for i in range(len(df))]

def pointpos(x):
    if x['isPivot'] == 2:
        return x['low'] - 1e-3
    elif x['isPivot'] == 1:
        return x['high'] + 1e-3
    else:
        return np.nan

df['isPivot'] = [isPivot(i, window) for i in range(len(df))]
df['pointpos'] = df.apply(lambda row: pointpos(row), axis=1)

# Select a subset of the DataFrame for visualization
dfpl = df[0:500]

# Create a candlestick chart
fig = go.Figure(data=[go.Candlestick(x=dfpl.index,
                open=dfpl['open'],
                high=dfpl['high'],
                low=dfpl['low'],
                close=dfpl['close'])])

# Add the pivot points as scatter plot markers
fig.add_scatter(x=dfpl.index, y=dfpl['pointpos'], mode="markers",
                marker=dict(size=5, color="MediumPurple"),
                name="pivot")

# Display the chart
fig.show()

def collect_channel(candle, backcandles, window):
    localdf = df[candle-backcandles-window:candle-window]
    localdf['isPivot'] = localdf.apply(lambda x: isPivot(x.name, window), axis=1)
    highs = localdf[localdf['isPivot'] == 1].high.values
    idxhighs = localdf[localdf['isPivot'] == 1].high.index
    lows = localdf[localdf['isPivot'] == 2].low.values
    idxlows = localdf[localdf['isPivot'] == 2].low.index
    
    if len(lows) >= 2 and len(highs) >= 2:
        sl_lows, interc_lows, r_value_l, _, _ = stats.linregress(idxlows, lows)
        sl_highs, interc_highs, r_value_h, _, _ = stats.linregress(idxhighs, highs)
    
        return (sl_lows, interc_lows, sl_highs, interc_highs, r_value_l**2, r_value_h**2)
    else:
        return (0, 0, 0, 0, 0, 0)  
    
candle = 200
backcandles = 40
window = 15
channel_info = collect_channel(candle, backcandles, window)

candle = 125
backcandles = 60
window = 10

# Select a subset of the DataFrame for visualization
dfpl = df[candle-backcandles-window-5:candle+200]

# Create a candlestick chart
fig = go.Figure(data=[go.Candlestick(x=dfpl.index,
                open=dfpl['open'],
                high=dfpl['high'],
                low=dfpl['low'],
                close=dfpl['close'])])

# Add the pivot points as scatter plot markers
fig.add_scatter(x=dfpl.index, y=dfpl['pointpos'], mode="markers",
                marker=dict(size=5, color="MediumPurple"),
                name="pivot")

# Detect the channels using the collect_channel function
sl_lows, interc_lows, sl_highs, interc_highs, r_sq_l, r_sq_h = collect_channel(candle, backcandles, window)
print(f"R-squared for lows: {r_sq_l}, R-squared for highs: {r_sq_h}")

# Generate x values for the channel lines
x = np.array(range(candle-backcandles-window, candle+1))

# Add the lower channel line to the chart
fig.add_trace(go.Scatter(x=x, y=sl_lows*x + interc_lows, mode='lines', name='Lower Channel'))

# Add the upper channel line to the chart
fig.add_trace(go.Scatter(x=x, y=sl_highs*x + interc_highs, mode='lines', name='Upper Channel'))

# Display the chart
fig.show()

def isBreakOut(candle, backcandles, window):
    if (candle - backcandles - window) < 0:
        return 0
    
    sl_lows, interc_lows, sl_highs, interc_highs, r_sq_l, r_sq_h = collect_channel(candle, backcandles, window)
    
    prev_idx = candle - 1
    prev_high = df.iloc[candle - 1].high
    prev_low = df.iloc[candle - 1].low
    prev_close = df.iloc[candle - 1].close
    
    curr_idx = candle
    curr_high = df.iloc[candle].high
    curr_low = df.iloc[candle].low
    curr_close = df.iloc[candle].close
    curr_open = df.iloc[candle].open

    if (prev_high > (sl_lows * prev_idx + interc_lows) and
        prev_close < (sl_lows * prev_idx + interc_lows) and
        curr_open < (sl_lows * curr_idx + interc_lows) and
        curr_close < (sl_lows * prev_idx + interc_lows)): #and r_sq_l > 0.9
        return 1
    
    elif (prev_low < (sl_highs * prev_idx + interc_highs) and
          prev_close > (sl_highs * prev_idx + interc_highs) and
          curr_open > (sl_highs * curr_idx + interc_highs) and
          curr_close > (sl_highs * prev_idx + interc_highs)): #and r_sq_h > 0.9
        return 2
    
    else:
        return 0
    
breakout_signals = [isBreakOut(i, backcandles, window) for i in range(len(df))]
df['BreakOut'] = breakout_signals

def breakpointpos(x):
    if x['isBreakOut'] == 2:
        return x['kow'] - 3e-3
    elif x['isBreakOut'] == 1:
        return x['high'] + 3e-3
    else:
        return np.nan
    
candle = 75
backcandles = 40
window = 3

# Select a subset of the DataFrame for visualization
dfpl = df[candle-backcandles-window-5:candle+20]

# Detect breakouts for the selected subset
dfpl["isBreakOut"] = [isBreakOut(candle, backcandles, window) for candle in dfpl.index]

# Determine the positions of the breakouts
dfpl['breakpointpos'] = dfpl.apply(lambda row: breakpointpos(row), axis=1)

candle = 59

# Create a candlestick chart
fig = go.Figure(data=[go.Candlestick(x=dfpl.index,
                open=dfpl['open'],
                high=dfpl['high'],
                low=dfpl['low'],
                close=dfpl['close'])])

# Add the pivot points as scatter plot markers
fig.add_scatter(x=dfpl.index, y=dfpl['pointpos'], mode="markers",
                marker=dict(size=5, color="MediumPurple"),
                name="pivot")

# Add the breakout points as scatter plot markers
fig.add_scatter(x=dfpl.index, y=dfpl['breakpointpos'], mode="markers",
                marker=dict(size=8, color="Black"), marker_symbol="hexagram",
                name="breakout")

# Detect the channels using the collect_channel function
sl_lows, interc_lows, sl_highs, interc_highs, r_sq_l, r_sq_h = collect_channel(candle, backcandles, window)
print(f"R-squared for lows: {r_sq_l}, R-squared for highs: {r_sq_h}")

# Generate x values for the channel lines
x = np.array(range(candle-backcandles-window, candle+1))

# Add the lower channel line to the chart
fig.add_trace(go.Scatter(x=x, y=sl_lows*x + interc_lows, mode='lines', name='Lower Channel'))

# Add the upper channel line to the chart
fig.add_trace(go.Scatter(x=x, y=sl_highs*x + interc_highs, mode='lines', name='Upper Channel'))

# Display the chart
fig.show()

print(df)
